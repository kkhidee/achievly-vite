/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@/shared/api/axios-client'
import type { RequestConfig, ResponseErrorConfig } from '@/shared/api/axios-client'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type { CreateEventMutationRequest, CreateEventMutationResponse, CreateEvent400 } from '../../models/events/CreateEvent.ts'
import { useMutation } from '@tanstack/react-query'
import { createEventMutationResponseSchema, createEventMutationRequestSchema } from '../../zod/events/createEventSchema.ts'

export const createEventMutationKey = () => [{ url: '/events' }] as const

export type CreateEventMutationKey = ReturnType<typeof createEventMutationKey>

/**
 * @summary Create event
 * {@link /events}
 */
export async function createEvent(
  { data }: { data: CreateEventMutationRequest },
  config: Partial<RequestConfig<CreateEventMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<CreateEventMutationResponse, ResponseErrorConfig<CreateEvent400>, CreateEventMutationRequest>({
    method: 'POST',
    url: `/events`,
    data: createEventMutationRequestSchema.parse(data),
    ...requestConfig,
  })
  return createEventMutationResponseSchema.parse(res.data)
}

/**
 * @summary Create event
 * {@link /events}
 */
export function useCreateEvent<TContext>(
  options: {
    mutation?: UseMutationOptions<CreateEventMutationResponse, ResponseErrorConfig<CreateEvent400>, { data: CreateEventMutationRequest }, TContext> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig<CreateEventMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? createEventMutationKey()

  return useMutation<CreateEventMutationResponse, ResponseErrorConfig<CreateEvent400>, { data: CreateEventMutationRequest }, TContext>(
    {
      mutationFn: async ({ data }) => {
        return createEvent({ data }, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}