/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from "@/shared/api/axios-client";
import type {
  RequestConfig,
  ResponseErrorConfig,
} from "@/shared/api/axios-client";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import type {
  CreateProjectMutationRequest,
  CreateProjectMutationResponse,
  CreateProjectPathParams,
  CreateProject400,
} from "../../models/projects/CreateProject";
import { useMutation } from "@tanstack/react-query";
import {
  createProjectMutationResponseSchema,
  createProjectMutationRequestSchema,
} from "../../zod/projects/createProjectSchema";

export const createProjectMutationKey = () => [{ url: "/projects" }] as const;

export type CreateProjectMutationKey = ReturnType<
  typeof createProjectMutationKey
>;

/**
 * @summary Create project
 * {@link /projects}
 */
export async function createProject(
  {
    team_id,
    data,
  }: {
    team_id: CreateProjectPathParams["team_id"];
    data: CreateProjectMutationRequest;
  },
  config: Partial<RequestConfig<CreateProjectMutationRequest>> & {
    client?: typeof client;
  } = {},
) {
  const { client: request = client, ...requestConfig } = config;

  const res = await request<
    CreateProjectMutationResponse,
    ResponseErrorConfig<CreateProject400>,
    CreateProjectMutationRequest
  >({
    method: "POST",
    url: `/projects`,
    data: createProjectMutationRequestSchema.parse(data),
    ...requestConfig,
  });
  return createProjectMutationResponseSchema.parse(res.data);
}

/**
 * @summary Create project
 * {@link /projects}
 */
export function useCreateProject<TContext>(
  options: {
    mutation?: UseMutationOptions<
      CreateProjectMutationResponse,
      ResponseErrorConfig<CreateProject400>,
      {
        team_id: CreateProjectPathParams["team_id"];
        data: CreateProjectMutationRequest;
      },
      TContext
    > & { client?: QueryClient };
    client?: Partial<RequestConfig<CreateProjectMutationRequest>> & {
      client?: typeof client;
    };
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {};
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? createProjectMutationKey();

  return useMutation<
    CreateProjectMutationResponse,
    ResponseErrorConfig<CreateProject400>,
    {
      team_id: CreateProjectPathParams["team_id"];
      data: CreateProjectMutationRequest;
    },
    TContext
  >(
    {
      mutationFn: async ({ team_id, data }) => {
        return createProject({ team_id, data }, config);
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  );
}
