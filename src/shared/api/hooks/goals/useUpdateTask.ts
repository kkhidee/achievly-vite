/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@/shared/api/axios-client'
import type { RequestConfig, ResponseErrorConfig } from '@/shared/api/axios-client'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type { UpdateTaskMutationRequest, UpdateTaskMutationResponse, UpdateTaskPathParams, UpdateTask400 } from '../../models/goals/UpdateTask.ts'
import { useMutation } from '@tanstack/react-query'

export const updateTaskMutationKey = () => [{ url: '/goals/tasks/{task_id}' }] as const

export type UpdateTaskMutationKey = ReturnType<typeof updateTaskMutationKey>

/**
 * @summary Update task
 * {@link /goals/tasks/:task_id}
 */
export async function updateTask(
  { task_id, data }: { task_id: UpdateTaskPathParams['task_id']; data: UpdateTaskMutationRequest },
  config: Partial<RequestConfig<UpdateTaskMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<UpdateTaskMutationResponse, ResponseErrorConfig<UpdateTask400>, UpdateTaskMutationRequest>({
    method: 'PATCH',
    url: `/goals/tasks/${task_id}`,
    data,
    ...requestConfig,
  })
  return res.data
}

/**
 * @summary Update task
 * {@link /goals/tasks/:task_id}
 */
export function useUpdateTask<TContext>(
  options: {
    mutation?: UseMutationOptions<
      UpdateTaskMutationResponse,
      ResponseErrorConfig<UpdateTask400>,
      { task_id: UpdateTaskPathParams['task_id']; data: UpdateTaskMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<UpdateTaskMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? updateTaskMutationKey()

  return useMutation<
    UpdateTaskMutationResponse,
    ResponseErrorConfig<UpdateTask400>,
    { task_id: UpdateTaskPathParams['task_id']; data: UpdateTaskMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ task_id, data }) => {
        return updateTask({ task_id, data }, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}