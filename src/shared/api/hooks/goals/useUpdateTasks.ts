/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from "@/shared/api/axios-client";
import type {
  RequestConfig,
  ResponseErrorConfig,
} from "@/shared/api/axios-client";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import type {
  UpdateTasksMutationRequest,
  UpdateTasksMutationResponse,
  UpdateTasks400,
} from "../../models/goals/UpdateTasks";
import { useMutation } from "@tanstack/react-query";
import {
  updateTasksMutationResponseSchema,
  updateTasksMutationRequestSchema,
} from "../../zod/goals/updateTasksSchema";

export const updateTasksMutationKey = () => [{ url: "/goals/tasks" }] as const;

export type UpdateTasksMutationKey = ReturnType<typeof updateTasksMutationKey>;

/**
 * @summary Update tasks
 * {@link /goals/tasks}
 */
export async function updateTasks(
  { data }: { data?: UpdateTasksMutationRequest },
  config: Partial<RequestConfig<UpdateTasksMutationRequest>> & {
    client?: typeof client;
  } = {},
) {
  const { client: request = client, ...requestConfig } = config;

  const res = await request<
    UpdateTasksMutationResponse,
    ResponseErrorConfig<UpdateTasks400>,
    UpdateTasksMutationRequest
  >({
    method: "POST",
    url: `/goals/tasks`,
    data: updateTasksMutationRequestSchema.parse(data),
    ...requestConfig,
  });
  return updateTasksMutationResponseSchema.parse(res.data);
}

/**
 * @summary Update tasks
 * {@link /goals/tasks}
 */
export function useUpdateTasks<TContext>(
  options: {
    mutation?: UseMutationOptions<
      UpdateTasksMutationResponse,
      ResponseErrorConfig<UpdateTasks400>,
      { data?: UpdateTasksMutationRequest },
      TContext
    > & {
      client?: QueryClient;
    };
    client?: Partial<RequestConfig<UpdateTasksMutationRequest>> & {
      client?: typeof client;
    };
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {};
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? updateTasksMutationKey();

  return useMutation<
    UpdateTasksMutationResponse,
    ResponseErrorConfig<UpdateTasks400>,
    { data?: UpdateTasksMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return updateTasks({ data }, config);
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  );
}
