/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from "@/shared/api/axios-client";
import type {
  RequestConfig,
  ResponseErrorConfig,
} from "@/shared/api/axios-client";
import type {
  QueryKey,
  QueryClient,
  QueryObserverOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  GetTasksQueryResponse,
  GetTasks400,
} from "../../models/goals/GetTasks";
import { queryOptions, useQuery } from "@tanstack/react-query";
import { getTasksQueryResponseSchema } from "../../zod/goals/getTasksSchema";

export const getTasksQueryKey = () => [{ url: "/goals/tasks" }] as const;

export type GetTasksQueryKey = ReturnType<typeof getTasksQueryKey>;

/**
 * @summary Get tasks
 * {@link /goals/tasks}
 */
export async function getTasks(
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config;

  const res = await request<
    GetTasksQueryResponse,
    ResponseErrorConfig<GetTasks400>,
    unknown
  >({ method: "GET", url: `/goals/tasks`, ...requestConfig });
  return getTasksQueryResponseSchema.parse(res.data);
}

export function getTasksQueryOptions(
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getTasksQueryKey();
  return queryOptions<
    GetTasksQueryResponse,
    ResponseErrorConfig<GetTasks400>,
    GetTasksQueryResponse,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal;
      return getTasks(config);
    },
  });
}

/**
 * @summary Get tasks
 * {@link /goals/tasks}
 */
export function useGetTasks<
  TData = GetTasksQueryResponse,
  TQueryData = GetTasksQueryResponse,
  TQueryKey extends QueryKey = GetTasksQueryKey,
>(
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetTasksQueryResponse,
        ResponseErrorConfig<GetTasks400>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient };
    client?: Partial<RequestConfig> & { client?: typeof client };
  } = {},
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {};
  const queryKey = queryOptions?.queryKey ?? getTasksQueryKey();

  const query = useQuery(
    {
      ...(getTasksQueryOptions(config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, "queryKey">),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<GetTasks400>> & {
    queryKey: TQueryKey;
  };

  query.queryKey = queryKey as TQueryKey;

  return query;
}
