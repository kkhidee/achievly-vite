/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from "@/shared/api/axios-client";
import type {
  RequestConfig,
  ResponseErrorConfig,
} from "@/shared/api/axios-client";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import type {
  GenerateGoalsMutationRequest,
  GenerateGoalsMutationResponse,
  GenerateGoals400,
} from "../../models/goals/GenerateGoals";
import { useMutation } from "@tanstack/react-query";
import {
  generateGoalsMutationResponseSchema,
  generateGoalsMutationRequestSchema,
} from "../../zod/goals/generateGoalsSchema";

export const generateGoalsMutationKey = () =>
  [{ url: "/goals/generate" }] as const;

export type GenerateGoalsMutationKey = ReturnType<
  typeof generateGoalsMutationKey
>;

/**
 * @summary Generate goal
 * {@link /goals/generate}
 */
export async function generateGoals(
  { data }: { data?: GenerateGoalsMutationRequest },
  config: Partial<RequestConfig<GenerateGoalsMutationRequest>> & {
    client?: typeof client;
  } = {},
) {
  const { client: request = client, ...requestConfig } = config;

  const res = await request<
    GenerateGoalsMutationResponse,
    ResponseErrorConfig<GenerateGoals400>,
    GenerateGoalsMutationRequest
  >({
    method: "POST",
    headers: { "Content-Type": "application/json" },
    url: `/goals/generate`,
    data: generateGoalsMutationRequestSchema.parse(data),
    ...requestConfig,
  });
  return generateGoalsMutationResponseSchema.parse(res.data);
}

/**
 * @summary Generate goal
 * {@link /goals/generate}
 */
export function useGenerateGoals<TContext>(
  options: {
    mutation?: UseMutationOptions<
      GenerateGoalsMutationResponse,
      ResponseErrorConfig<GenerateGoals400>,
      { data?: GenerateGoalsMutationRequest },
      TContext
    > & {
      client?: QueryClient;
    };
    client?: Partial<RequestConfig<GenerateGoalsMutationRequest>> & {
      client?: typeof client;
    };
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {};
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? generateGoalsMutationKey();

  return useMutation<
    GenerateGoalsMutationResponse,
    ResponseErrorConfig<GenerateGoals400>,
    { data?: GenerateGoalsMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return generateGoals({ data }, config);
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  );
}
