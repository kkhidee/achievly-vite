/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from "@/shared/api/axios-client";
import type {
  RequestConfig,
  ResponseErrorConfig,
} from "@/shared/api/axios-client";
import type {
  QueryKey,
  QueryClient,
  QueryObserverOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  GetProjectsRightsQueryResponse,
  GetProjectsRightsPathParams,
  GetProjectsRights400,
} from "../../models/teams/GetProjectsRights";
import { queryOptions, useQuery } from "@tanstack/react-query";
import { getProjectsRightsQueryResponseSchema } from "../../zod/teams/getProjectsRightsSchema";

export const getProjectsRightsQueryKey = ({
  member_id,
  team_id,
}: {
  member_id: GetProjectsRightsPathParams["member_id"];
  team_id: GetProjectsRightsPathParams["team_id"];
}) =>
  [
    {
      url: "/teams/:team_id/members/:member_id/projects_rights",
      params: { team_id: team_id, member_id: member_id },
    },
  ] as const;

export type GetProjectsRightsQueryKey = ReturnType<
  typeof getProjectsRightsQueryKey
>;

/**
 * @summary Get projects rights by member id
 * {@link /teams/:team_id/members/:member_id/projects_rights}
 */
export async function getProjectsRights(
  {
    member_id,
    team_id,
  }: {
    member_id: GetProjectsRightsPathParams["member_id"];
    team_id: GetProjectsRightsPathParams["team_id"];
  },
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config;

  const res = await request<
    GetProjectsRightsQueryResponse,
    ResponseErrorConfig<GetProjectsRights400>,
    unknown
  >({
    method: "GET",
    url: `/teams/${team_id}/members/${member_id}/projects_rights`,
    ...requestConfig,
  });
  return getProjectsRightsQueryResponseSchema.parse(res.data);
}

export function getProjectsRightsQueryOptions(
  {
    member_id,
    team_id,
  }: {
    member_id: GetProjectsRightsPathParams["member_id"];
    team_id: GetProjectsRightsPathParams["team_id"];
  },
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getProjectsRightsQueryKey({ member_id, team_id });
  return queryOptions<
    GetProjectsRightsQueryResponse,
    ResponseErrorConfig<GetProjectsRights400>,
    GetProjectsRightsQueryResponse,
    typeof queryKey
  >({
    enabled: !!(member_id && team_id),
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal;
      return getProjectsRights({ member_id, team_id }, config);
    },
  });
}

/**
 * @summary Get projects rights by member id
 * {@link /teams/:team_id/members/:member_id/projects_rights}
 */
export function useGetProjectsRights<
  TData = GetProjectsRightsQueryResponse,
  TQueryData = GetProjectsRightsQueryResponse,
  TQueryKey extends QueryKey = GetProjectsRightsQueryKey,
>(
  {
    member_id,
    team_id,
  }: {
    member_id: GetProjectsRightsPathParams["member_id"];
    team_id: GetProjectsRightsPathParams["team_id"];
  },
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetProjectsRightsQueryResponse,
        ResponseErrorConfig<GetProjectsRights400>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & {
      client?: QueryClient;
    };
    client?: Partial<RequestConfig> & { client?: typeof client };
  } = {},
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {};
  const queryKey =
    queryOptions?.queryKey ?? getProjectsRightsQueryKey({ member_id, team_id });

  const query = useQuery(
    {
      ...(getProjectsRightsQueryOptions(
        { member_id, team_id },
        config,
      ) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, "queryKey">),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<GetProjectsRights400>> & {
    queryKey: TQueryKey;
  };

  query.queryKey = queryKey as TQueryKey;

  return query;
}
