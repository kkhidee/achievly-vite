/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from "@/shared/api/axios-client";
import type {
  RequestConfig,
  ResponseErrorConfig,
} from "@/shared/api/axios-client";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import type {
  UpdateTeamMemberMutationRequest,
  UpdateTeamMemberMutationResponse,
  UpdateTeamMemberPathParams,
  UpdateTeamMember400,
} from "../../models/teams/UpdateTeamMember";
import { useMutation } from "@tanstack/react-query";
import {
  updateTeamMemberMutationResponseSchema,
  updateTeamMemberMutationRequestSchema,
} from "../../zod/teams/updateTeamMemberSchema";

export const updateTeamMemberMutationKey = () =>
  [{ url: "/teams/{team_id}/members/{member_id}" }] as const;

export type UpdateTeamMemberMutationKey = ReturnType<
  typeof updateTeamMemberMutationKey
>;

/**
 * @summary Update team member
 * {@link /teams/:team_id/members/:member_id}
 */
export async function updateTeamMember(
  {
    member_id,
    team_id,
    data,
  }: {
    member_id: UpdateTeamMemberPathParams["member_id"];
    team_id: UpdateTeamMemberPathParams["team_id"];
    data: UpdateTeamMemberMutationRequest;
  },
  config: Partial<RequestConfig<UpdateTeamMemberMutationRequest>> & {
    client?: typeof client;
  } = {},
) {
  const { client: request = client, ...requestConfig } = config;

  const res = await request<
    UpdateTeamMemberMutationResponse,
    ResponseErrorConfig<UpdateTeamMember400>,
    UpdateTeamMemberMutationRequest
  >({
    method: "PATCH",
    url: `/teams/${team_id}/members/${member_id}`,
    data: updateTeamMemberMutationRequestSchema.parse(data),
    ...requestConfig,
  });
  return updateTeamMemberMutationResponseSchema.parse(res.data);
}

/**
 * @summary Update team member
 * {@link /teams/:team_id/members/:member_id}
 */
export function useUpdateTeamMember<TContext>(
  options: {
    mutation?: UseMutationOptions<
      UpdateTeamMemberMutationResponse,
      ResponseErrorConfig<UpdateTeamMember400>,
      {
        member_id: UpdateTeamMemberPathParams["member_id"];
        team_id: UpdateTeamMemberPathParams["team_id"];
        data: UpdateTeamMemberMutationRequest;
      },
      TContext
    > & { client?: QueryClient };
    client?: Partial<RequestConfig<UpdateTeamMemberMutationRequest>> & {
      client?: typeof client;
    };
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {};
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey =
    mutationOptions.mutationKey ?? updateTeamMemberMutationKey();

  return useMutation<
    UpdateTeamMemberMutationResponse,
    ResponseErrorConfig<UpdateTeamMember400>,
    {
      member_id: UpdateTeamMemberPathParams["member_id"];
      team_id: UpdateTeamMemberPathParams["team_id"];
      data: UpdateTeamMemberMutationRequest;
    },
    TContext
  >(
    {
      mutationFn: async ({ member_id, team_id, data }) => {
        return updateTeamMember({ member_id, team_id, data }, config);
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  );
}
