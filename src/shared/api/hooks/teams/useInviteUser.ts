/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from "@/shared/api/axios-client";
import type {
  RequestConfig,
  ResponseErrorConfig,
} from "@/shared/api/axios-client";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import type {
  InviteUserMutationRequest,
  InviteUserMutationResponse,
  InviteUser400,
} from "../../models/teams/InviteUser";
import { useMutation } from "@tanstack/react-query";
import {
  inviteUserMutationResponseSchema,
  inviteUserMutationRequestSchema,
} from "../../zod/teams/inviteUserSchema";

export const inviteUserMutationKey = () => [{ url: "/teams/invite" }] as const;

export type InviteUserMutationKey = ReturnType<typeof inviteUserMutationKey>;

/**
 * @summary Invite user to team
 * {@link /teams/invite}
 */
export async function inviteUser(
  { data }: { data: InviteUserMutationRequest },
  config: Partial<RequestConfig<InviteUserMutationRequest>> & {
    client?: typeof client;
  } = {},
) {
  const { client: request = client, ...requestConfig } = config;

  const res = await request<
    InviteUserMutationResponse,
    ResponseErrorConfig<InviteUser400>,
    InviteUserMutationRequest
  >({
    method: "POST",
    url: `/teams/invite`,
    data: inviteUserMutationRequestSchema.parse(data),
    ...requestConfig,
  });
  return inviteUserMutationResponseSchema.parse(res.data);
}

/**
 * @summary Invite user to team
 * {@link /teams/invite}
 */
export function useInviteUser<TContext>(
  options: {
    mutation?: UseMutationOptions<
      InviteUserMutationResponse,
      ResponseErrorConfig<InviteUser400>,
      { data: InviteUserMutationRequest },
      TContext
    > & {
      client?: QueryClient;
    };
    client?: Partial<RequestConfig<InviteUserMutationRequest>> & {
      client?: typeof client;
    };
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {};
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? inviteUserMutationKey();

  return useMutation<
    InviteUserMutationResponse,
    ResponseErrorConfig<InviteUser400>,
    { data: InviteUserMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return inviteUser({ data }, config);
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  );
}
